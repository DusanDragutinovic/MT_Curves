#This is a code used for four first bullets of PartIII

#We compute the orbits as well as the lists of matrices mapping to the 
#representative from one of P1, P3, P4 or P6 below.

P6 = (0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0)
OrbitP6 = {(0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0)}
list_of_matrices6 = []
for i in range(0, 8680):
    list_of_matrices6.append(0)
list_of_matrices6[0] = matrix([[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]])
var('x, y, z, t, u')
def f6(x, y, z, t, u):
    return P6[0]*x^2 + P6[1]*x*y + P6[2]*x*z + P6[3]*x*t + P6[4]*x*u + P6[5]*y^2 + P6[6]*y*z + P6[7]*y*t + P6[8]*y*u + P6[9]*z^2 + P6[10]*z*t + P6[11]*z*u + P6[12]*t^2 + P6[13]*t*u + P6[14]*u^2
for m in PGL:
    def g6(x, y, z, t, u):
        return f6(m[0, 0]*x + m[0, 1]*y + m[0, 2]*z + m[0, 3]*t + m[0, 4]*u, m[1, 0]*x + m[1, 1]*y + m[1, 2]*z + m[1, 3]*t + m[1, 4]*u, m[2, 0]*x + m[2, 1]*y + m[2, 2]*z + m[2, 3]*t + m[2, 4]*u, m[3, 0]*x + m[3, 1]*y + m[3, 2]*z + m[3, 3]*t + m[3, 4]*u, m[4, 0]*x + m[4, 1]*y + m[4, 2]*z + m[4, 3]*t + m[4, 4]*u)
    ri.<X, Y, Z, T, U> = GF(2)[]
    h6 = g6(X, Y, Z, T, U)
    Q6 = (h6.coefficient(X^2), h6.coefficient(X*Y), h6.coefficient(X*Z), h6.coefficient(X*T), h6.coefficient(X*U), h6.coefficient(Y^2), h6.coefficient(Y*Z), h6.coefficient(Y*T), h6.coefficient(Y*U), h6.coefficient(Z^2), h6.coefficient(Z*T), h6.coefficient(Z*U), h6.coefficient(T^2), h6.coefficient(T*U), h6.coefficient(U^2))
    OrbitP6 = OrbitP6.union({Q6})
    if list_of_matrices6[len(OrbitP6)-1] == 0:
        list_of_matrices6.append(m)
OrbitP6 = list(OrbitP6)

#The other things are below. We first need a supporting function.

def switch_using_m(P, Q, R, m):
    teri.<X, Y, Z, T, U> = GF(2)[]
    def fP(x, y, z, t, u):
        return P[0]*x^2 + P[1]*x*y + P[2]*x*z + P[3]*x*t + P[4]*x*u + P[5]*y^2 + P[6]*y*z + P[7]*y*t + P[8]*y*u + P[9]*z^2 + P[10]*z*t + P[11]*z*u + P[12]*t^2 + P[13]*t*u + P[14]*u^2
    def fQ(x, y, z, t, u):
        return Q[0]*x^2 + Q[1]*x*y + Q[2]*x*z + Q[3]*x*t + Q[4]*x*u + Q[5]*y^2 + Q[6]*y*z + Q[7]*y*t + Q[8]*y*u + Q[9]*z^2 + Q[10]*z*t + Q[11]*z*u + Q[12]*t^2 + Q[13]*t*u + Q[14]*u^2
    def fR(x, y, z, t, u):
        return R[0]*x^2 + R[1]*x*y + R[2]*x*z + R[3]*x*t + R[4]*x*u + R[5]*y^2 + R[6]*y*z + R[7]*y*t + R[8]*y*u + R[9]*z^2 + R[10]*z*t + R[11]*z*u + R[12]*t^2 + R[13]*t*u + R[14]*u^2
    def gP(x, y, z, t, u):
        return fP(m[0, 0]*x + m[0, 1]*y + m[0, 2]*z + m[0, 3]*t + m[0, 4]*u, m[1, 0]*x + m[1, 1]*y + m[1, 2]*z + m[1, 3]*t + m[1, 4]*u, m[2, 0]*x + m[2, 1]*y + m[2, 2]*z + m[2, 3]*t + m[2, 4]*u, m[3, 0]*x + m[3, 1]*y + m[3, 2]*z + m[3, 3]*t + m[3, 4]*u, m[4, 0]*x + m[4, 1]*y + m[4, 2]*z + m[4, 3]*t + m[4, 4]*u)
    def gQ(x, y, z, t, u):
        return fQ(m[0, 0]*x + m[0, 1]*y + m[0, 2]*z + m[0, 3]*t + m[0, 4]*u, m[1, 0]*x + m[1, 1]*y + m[1, 2]*z + m[1, 3]*t + m[1, 4]*u, m[2, 0]*x + m[2, 1]*y + m[2, 2]*z + m[2, 3]*t + m[2, 4]*u, m[3, 0]*x + m[3, 1]*y + m[3, 2]*z + m[3, 3]*t + m[3, 4]*u, m[4, 0]*x + m[4, 1]*y + m[4, 2]*z + m[4, 3]*t + m[4, 4]*u)
    def gR(x, y, z, t, u):
        return fR(m[0, 0]*x + m[0, 1]*y + m[0, 2]*z + m[0, 3]*t + m[0, 4]*u, m[1, 0]*x + m[1, 1]*y + m[1, 2]*z + m[1, 3]*t + m[1, 4]*u, m[2, 0]*x + m[2, 1]*y + m[2, 2]*z + m[2, 3]*t + m[2, 4]*u, m[3, 0]*x + m[3, 1]*y + m[3, 2]*z + m[3, 3]*t + m[3, 4]*u, m[4, 0]*x + m[4, 1]*y + m[4, 2]*z + m[4, 3]*t + m[4, 4]*u)
    hP = gP(X, Y, Z, T, U)
    nP = (hP.coefficient(X^2), hP.coefficient(X*Y), hP.coefficient(X*Z), hP.coefficient(X*T), hP.coefficient(X*U), hP.coefficient(Y^2), hP.coefficient(Y*Z), hP.coefficient(Y*T), hP.coefficient(Y*U), hP.coefficient(Z^2), hP.coefficient(Z*T), hP.coefficient(Z*U), hP.coefficient(T^2), hP.coefficient(T*U), hP.coefficient(U^2))
    hQ = gQ(X, Y, Z, T, U)
    nQ = (hQ.coefficient(X^2), hQ.coefficient(X*Y), hQ.coefficient(X*Z), hQ.coefficient(X*T), hQ.coefficient(X*U), hQ.coefficient(Y^2), hQ.coefficient(Y*Z), hQ.coefficient(Y*T), hQ.coefficient(Y*U), hQ.coefficient(Z^2), hQ.coefficient(Z*T), hQ.coefficient(Z*U), hQ.coefficient(T^2), hQ.coefficient(T*U), hQ.coefficient(U^2))
    hR = gR(X, Y, Z, T, U)
    nR = (hR.coefficient(X^2), hR.coefficient(X*Y), hR.coefficient(X*Z), hR.coefficient(X*T), hR.coefficient(X*U), hR.coefficient(Y^2), hR.coefficient(Y*Z), hR.coefficient(Y*T), hR.coefficient(Y*U), hR.coefficient(Z^2), hR.coefficient(Z*T), hR.coefficient(Z*U), hR.coefficient(T^2), hR.coefficient(T*U), hR.coefficient(U^2))
    el = [nP, nQ, nR]
    return el

#Main part of this.
	
main_part = 1
if main_part == 1:
	list_1 = []
	list_3 = []
	list_4 = []
	list_6 = []
	three_in_P_4_list_1 = []
	three_in_P_4_list_2 = []
	three_in_P_4_list_3 = []
	three_in_P_1_list_1 = []
	three_in_P_1_list_2 = []
	three_in_P_1_list_3 = []
	three_in_P_6_list_1 = []
	three_in_P_6_list_2 = []
	three_in_P_6_list_3 = []
	three_in_P_3_list_1 = []
	three_in_P_3_list_2 = []
	three_in_P_3_list_3 = []

	for el in listP1:
		P = P1
		Q = el[0]
		R = el[1]
		indi = indicator(P, Q, R)
		indikator = indi[0]
		ind = indi[1]
		if indikator == 3:
			n = matricesP3[ind]
			m = n.inverse()
			elt = switch_using_m(P, Q, R, m)
			list_3.append(elt)
		elif indikator == 4:
			n = matricesP4[ind]
			m = n.inverse()
			elt = switch_using_m(P, Q, R, m)
			list_4.append(elt)
		elif indikator == 6:
			n = matricesP6[ind]
			m = n.inverse()
			elt = switch_using_m(P, Q, R, m)
			list_6.append(elt)
		elif indikator == 1:
			n = matricesP1[ind]
			m = n.inverse()
			elt = switch_using_m(P, Q, R, m)
			list_1.append(elt)
		elif indikator == 333:
			ind1 = OrbitP3.index(P)
			n = matricesP3[ind1]
			m = n.inverse()
			elt1 = switch_using_m(P, Q, R, m)
			three_in_P_3_list_1.append(elt1)
			ind2 = OrbitP3.index(Q)
			n = matricesP3[ind2]
			m = n.inverse()
			elt2 = switch_using_m(P, Q, R, m)
			three_in_P_3_list_2.append(elt2)
			ind3 = OrbitP3.index(R)
			n = matricesP3[ind3]
			m = n.inverse()
			elt3 = switch_using_m(P, Q, R, m)
			three_in_P_3_list_3.append(elt3)
		elif indikator == 444:
			ind1 = OrbitP4.index(P)
			n = matricesP4[ind1]
			m = n.inverse()
			elt1 = switch_using_m(P, Q, R, m)
			three_in_P_4_list_1.append(elt1)
			ind2 = OrbitP4.index(Q)
			n = matricesP4[ind2]
			m = n.inverse()
			elt2 = switch_using_m(P, Q, R, m)
			three_in_P_4_list_2.append(elt2)
			ind3 = OrbitP4.index(R)
			n = matricesP4[ind3]
			m = n.inverse()
			elt3 = switch_using_m(P, Q, R, m)
			three_in_P_4_list_3.append(elt3)
		elif indikator == 666:
			ind1 = OrbitP6.index(P)
			n = matricesP6[ind1]
			m = n.inverse()
			elt1 = switch_using_m(P, Q, R, m)
			three_in_P_6_list_1.append(elt1)
			ind2 = OrbitP6.index(Q)
			n = matricesP6[ind2]
			m = n.inverse()
			elt2 = switch_using_m(P, Q, R, m)
			three_in_P_6_list_2.append(elt2)
			ind3 = OrbitP6.index(R)
			n = matricesP6[ind3]
			m = n.inverse()
			elt3 = switch_using_m(P, Q, R, m)
			three_in_P_6_list_3.append(elt3)
		elif indikator == 111:
			ind1 = OrbitP1.index(P)
			n = matricesP1[ind1]
			m = n.inverse()
			elt1 = switch_using_m(P, Q, R, m)
			three_in_P_1_list_1.append(elt1)
			ind2 = OrbitP1.index(Q)
			n = matricesP1[ind2]
			m = n.inverse()
			elt2 = switch_using_m(P, Q, R, m)
			three_in_P_1_list_2.append(elt2)
			ind3 = OrbitP1.index(R)
			n = matricesP1[ind3]
			m = n.inverse()
			elt3 = switch_using_m(P, Q, R, m)
			three_in_P_1_list_3.append(elt3)
		else: 
			print('error')

	for el in listP3:
		P = P3
		Q = el[0]
		R = el[1]
		indi = indicator(P, Q, R)
		indikator = indi[0]
		ind = indi[1]
		if indikator == 3:
			n = matricesP3[ind]
			m = n.inverse()
			elt = switch_using_m(P, Q, R, m)
			list_3.append(elt)
		elif indikator == 4:
			n = matricesP4[ind]
			m = n.inverse()
			elt = switch_using_m(P, Q, R, m)
			list_4.append(elt)
		elif indikator == 6:
			n = matricesP6[ind]
			m = n.inverse()
			elt = switch_using_m(P, Q, R, m)
			list_6.append(elt)
		elif indikator == 1:
			n = matricesP1[ind]
			m = n.inverse()
			elt = switch_using_m(P, Q, R, m)
			list_1.append(elt)
		elif indikator == 333:
			ind1 = OrbitP3.index(P)
			n = matricesP3[ind1]
			m = n.inverse()
			elt1 = switch_using_m(P, Q, R, m)
			three_in_P_3_list_1.append(elt1)
			ind2 = OrbitP3.index(Q)
			n = matricesP3[ind2]
			m = n.inverse()
			elt2 = switch_using_m(P, Q, R, m)
			three_in_P_3_list_2.append(elt2)
			ind3 = OrbitP3.index(R)
			n = matricesP3[ind3]
			m = n.inverse()
			elt3 = switch_using_m(P, Q, R, m)
			three_in_P_3_list_3.append(elt3)
		elif indikator == 444:
			ind1 = OrbitP4.index(P)
			n = matricesP4[ind1]
			m = n.inverse()
			elt1 = switch_using_m(P, Q, R, m)
			three_in_P_4_list_1.append(elt1)
			ind2 = OrbitP4.index(Q)
			n = matricesP4[ind2]
			m = n.inverse()
			elt2 = switch_using_m(P, Q, R, m)
			three_in_P_4_list_2.append(elt2)
			ind3 = OrbitP4.index(R)
			n = matricesP4[ind3]
			m = n.inverse()
			elt3 = switch_using_m(P, Q, R, m)
			three_in_P_4_list_3.append(elt3)
		elif indikator == 666:
			ind1 = OrbitP6.index(P)
			n = matricesP6[ind1]
			m = n.inverse()
			elt1 = switch_using_m(P, Q, R, m)
			three_in_P_6_list_1.append(elt1)
			ind2 = OrbitP6.index(Q)
			n = matricesP6[ind2]
			m = n.inverse()
			elt2 = switch_using_m(P, Q, R, m)
			three_in_P_6_list_2.append(elt2)
			ind3 = OrbitP6.index(R)
			n = matricesP6[ind3]
			m = n.inverse()
			elt3 = switch_using_m(P, Q, R, m)
			three_in_P_6_list_3.append(elt3)
		elif indikator == 111:
			ind1 = OrbitP1.index(P)
			n = matricesP1[ind1]
			m = n.inverse()
			elt1 = switch_using_m(P, Q, R, m)
			three_in_P_1_list_1.append(elt1)
			ind2 = OrbitP1.index(Q)
			n = matricesP1[ind2]
			m = n.inverse()
			elt2 = switch_using_m(P, Q, R, m)
			three_in_P_1_list_2.append(elt2)
			ind3 = OrbitP1.index(R)
			n = matricesP1[ind3]
			m = n.inverse()
			elt3 = switch_using_m(P, Q, R, m)
			three_in_P_1_list_3.append(elt3)
		else: 
			print('error')
			
	for el in listP4:
		P = P4
		Q = el[0]
		R = el[1]
		indi = indicator(P, Q, R)
		indikator = indi[0]
		ind = indi[1]
		if indikator == 3:
			n = matricesP3[ind]
			m = n.inverse()
			elt = switch_using_m(P, Q, R, m)
			list_3.append(elt)
		elif indikator == 4:
			n = matricesP4[ind]
			m = n.inverse()
			elt = switch_using_m(P, Q, R, m)
			list_4.append(elt)
		elif indikator == 6:
			n = matricesP6[ind]
			m = n.inverse()
			elt = switch_using_m(P, Q, R, m)
			list_6.append(elt)
		elif indikator == 1:
			n = matricesP1[ind]
			m = n.inverse()
			elt = switch_using_m(P, Q, R, m)
			list_1.append(elt)
		elif indikator == 333:
			ind1 = OrbitP3.index(P)
			n = matricesP3[ind1]
			m = n.inverse()
			elt1 = switch_using_m(P, Q, R, m)
			three_in_P_3_list_1.append(elt1)
			ind2 = OrbitP3.index(Q)
			n = matricesP3[ind2]
			m = n.inverse()
			elt2 = switch_using_m(P, Q, R, m)
			three_in_P_3_list_2.append(elt2)
			ind3 = OrbitP3.index(R)
			n = matricesP3[ind3]
			m = n.inverse()
			elt3 = switch_using_m(P, Q, R, m)
			three_in_P_3_list_3.append(elt3)
		elif indikator == 444:
			ind1 = OrbitP4.index(P)
			n = matricesP4[ind1]
			m = n.inverse()
			elt1 = switch_using_m(P, Q, R, m)
			three_in_P_4_list_1.append(elt1)
			ind2 = OrbitP4.index(Q)
			n = matricesP4[ind2]
			m = n.inverse()
			elt2 = switch_using_m(P, Q, R, m)
			three_in_P_4_list_2.append(elt2)
			ind3 = OrbitP4.index(R)
			n = matricesP4[ind3]
			m = n.inverse()
			elt3 = switch_using_m(P, Q, R, m)
			three_in_P_4_list_3.append(elt3)
		elif indikator == 666:
			ind1 = OrbitP6.index(P)
			n = matricesP6[ind1]
			m = n.inverse()
			elt1 = switch_using_m(P, Q, R, m)
			three_in_P_6_list_1.append(elt1)
			ind2 = OrbitP6.index(Q)
			n = matricesP6[ind2]
			m = n.inverse()
			elt2 = switch_using_m(P, Q, R, m)
			three_in_P_6_list_2.append(elt2)
			ind3 = OrbitP6.index(R)
			n = matricesP6[ind3]
			m = n.inverse()
			elt3 = switch_using_m(P, Q, R, m)
			three_in_P_6_list_3.append(elt3)
		elif indikator == 111:
			ind1 = OrbitP1.index(P)
			n = matricesP1[ind1]
			m = n.inverse()
			elt1 = switch_using_m(P, Q, R, m)
			three_in_P_1_list_1.append(elt1)
			ind2 = OrbitP1.index(Q)
			n = matricesP1[ind2]
			m = n.inverse()
			elt2 = switch_using_m(P, Q, R, m)
			three_in_P_1_list_2.append(elt2)
			ind3 = OrbitP1.index(R)
			n = matricesP1[ind3]
			m = n.inverse()
			elt3 = switch_using_m(P, Q, R, m)
			three_in_P_1_list_3.append(elt3)
		else: 
			print('error')
		
	for el in listP6:
		P = P6
		Q = el[0]
		R = el[1]
		indi = indicator(P, Q, R)
		indikator = indi[0]
		ind = indi[1]
		if indikator == 3:
			n = matricesP3[ind]
			m = n.inverse()
			elt = switch_using_m(P, Q, R, m)
			list_3.append(elt)
		elif indikator == 4:
			n = matricesP4[ind]
			m = n.inverse()
			elt = switch_using_m(P, Q, R, m)
			list_4.append(elt)
		elif indikator == 6:
			n = matricesP6[ind]
			m = n.inverse()
			elt = switch_using_m(P, Q, R, m)
			list_6.append(elt)
		elif indikator == 1:
			n = matricesP1[ind]
			m = n.inverse()
			elt = switch_using_m(P, Q, R, m)
			list_1.append(elt)

		elif indikator == 333:
			ind1 = OrbitP3.index(P)
			n = matricesP3[ind1]
			m = n.inverse()
			elt1 = switch_using_m(P, Q, R, m)
			three_in_P_3_list_1.append(elt1)
			ind2 = OrbitP3.index(Q)
			n = matricesP3[ind2]
			m = n.inverse()
			elt2 = switch_using_m(P, Q, R, m)
			three_in_P_3_list_2.append(elt2)
			ind3 = OrbitP3.index(R)
			n = matricesP3[ind3]
			m = n.inverse()
			elt3 = switch_using_m(P, Q, R, m)
			three_in_P_3_list_3.append(elt3)
		elif indikator == 444:
			ind1 = OrbitP4.index(P)
			n = matricesP4[ind1]
			m = n.inverse()
			elt1 = switch_using_m(P, Q, R, m)
			three_in_P_4_list_1.append(elt1)
			ind2 = OrbitP4.index(Q)
			n = matricesP4[ind2]
			m = n.inverse()
			elt2 = switch_using_m(P, Q, R, m)
			three_in_P_4_list_2.append(elt2)
			ind3 = OrbitP4.index(R)
			n = matricesP4[ind3]
			m = n.inverse()
			elt3 = switch_using_m(P, Q, R, m)
			three_in_P_4_list_3.append(elt3)
		elif indikator == 666:
			ind1 = OrbitP6.index(P)
			n = matricesP6[ind1]
			m = n.inverse()
			elt1 = switch_using_m(P, Q, R, m)
			three_in_P_6_list_1.append(elt1)
			ind2 = OrbitP6.index(Q)
			n = matricesP6[ind2]
			m = n.inverse()
			elt2 = switch_using_m(P, Q, R, m)
			three_in_P_6_list_2.append(elt2)
			ind3 = OrbitP6.index(R)
			n = matricesP6[ind3]
			m = n.inverse()
			elt3 = switch_using_m(P, Q, R, m)
			three_in_P_6_list_3.append(elt3)
		elif indikator == 111:
			ind1 = OrbitP1.index(P)
			n = matricesP1[ind1]
			m = n.inverse()
			elt1 = switch_using_m(P, Q, R, m)
			three_in_P_1_list_1.append(elt1)
			ind2 = OrbitP1.index(Q)
			n = matricesP1[ind2]
			m = n.inverse()
			elt2 = switch_using_m(P, Q, R, m)
			three_in_P_1_list_2.append(elt2)
			ind3 = OrbitP1.index(R)
			n = matricesP1[ind3]
			m = n.inverse()
			elt3 = switch_using_m(P, Q, R, m)
			three_in_P_1_list_3.append(elt3)
		else: 
			print('error')

#For filtering the duplicates of ideals, we use the same ideas 
#from CompleteIntersectionsPart2Code.txt 