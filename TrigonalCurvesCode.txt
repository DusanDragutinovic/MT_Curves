#Let P20 be the list of all 21-tuples without the zero tuple. 
#Let PGL3 be the list of all 3x3 matrices in F_2.

#We split the list PGL3 into the smaller ones G_i, to firstly reduce the
#set of representatives using the matrices from G_i. For example, the list
#G1 contained three matrices are below, and we firstly used in like in the 
#following code. We repeated this idea until we used all matrices from PGL3

part1 = 1
if part1 == 1:
	L = P20.copy()
	g1 = Matrix([[1, 0, 1], [0, 1, 1], [0, 1, 0]])
	g2 = Matrix([[0, 1, 0], [0, 0, 1], [1, 0, 0]])
	g3 = Matrix([[0, 1, 0], [1, 0, 0], [1, 1, 1]])
	G1 = [g1, g2, g3]
	nlis = []
	templis = []
	var('x, y, z')
	teri.<X, Y, Z> = GF(2)[]
	li = [X^5, X^4*Y, X^4*Z, X^3*Y^2, X^3*Y*Z, X^3*Z^2, X^2*Y^3, X^2*Y^2*Z, X^2*Y*Z^2, X^2*Z^3, X*Y^4, X*Y^3*Z, X*Y^2*Z^2, X*Y*Z^3, X*Z^4, Y^5, Y^4*Z, Y^3*Z^2, Y^2*Z^3, Y*Z^4, Z^5]
	indi = 0
	while len(L)>999 and indi<2097:
		templis = []
		ind = 0
		while ind < 1000:
			ind = ind + 1
			P = L[ind]
			if (P in templis)==False:
				nlis.append(P)
				templis.append(P)
				def f(x, y, z):
					return P[0]*x^5 + P[1]*x^4*y + P[2]*x^4*z + P[3]*x^3*y^2 + P[4]*x^3*y*z + P[5]*x^3*z^2 + P[6]*x^2*y^3 + P[7]*x^2*y^2*z + P[8]*x^2*y*z^2 + P[9]*x^2*z^3 + P[10]*x*y^4 + P[11]*x*y^3*z + P[12]*x*y^2*z^2 + P[13]*x*y*z^3 + P[14]*x*z^4 + P[15]*y^5 + P[16]*y^4*z + P[17]*y^3*z^2 + P[18]*y^2*z^3 + P[19]*y*z^4 + P[20]*z^5
				for m in G1:
					def g(x, y, z):
						return f(m[0, 0]*x + m[0, 1]*y + m[0, 2]*z, m[1, 0]*x + m[1, 1]*y + m[1, 2]*z, m[2, 0]*x + m[2, 1]*y + m[2, 2]*z)
					h = g(X, Y, Z)
					Q = (h.coefficient(X^5), h.coefficient(X^4*Y), h.coefficient(X^4*Z), h.coefficient(X^3*Y^2), h.coefficient(X^3*Y*Z), h.coefficient(X^3*Z^2), h.coefficient(X^2*Y^3), h.coefficient(X^2*Y^2*Z), h.coefficient(X^2*Y*Z^2), h.coefficient(X^2*Z^3), h.coefficient(X*Y^4), h.coefficient(X*Y^3*Z), h.coefficient(X*Y^2*Z^2), h.coefficient(X*Y*Z^3), h.coefficient(X*Z^4), h.coefficient(Y^5), h.coefficient(Y^4*Z), h.coefficient(Y^3*Z^2), h.coefficient(Y^2*Z^3), h.coefficient(Y*Z^4), h.coefficient(Z^5))
					templis.append(Q)
		A = set(L)
		B = set(templis)
		C = A - B
		L = list(C)
		indi = indi + 1    
	print('First part over')    

#The lists nlis, after the previously described job, result in 
#obtaining the list preRepresentatives, which the list of 21-tuples, 
#we got after using all the matrices from PGL3. However, one can 
#note that doing the things as above may not result in obtaining, 
#the non-isomorphic representative. Therefore, we need to filter 
#the list preRepresentatives one more time. 

part2 = 1
if part2 == 1:
	L = preRepresentatives.copy()
	Representatives = []
	var('x, y, z')
	teri.<X, Y, Z> = GF(2)[]
	li = [X^5, X^4*Y, X^4*Z, X^3*Y^2, X^3*Y*Z, X^3*Z^2, X^2*Y^3, X^2*Y^2*Z, X^2*Y*Z^2, X^2*Z^3, X*Y^4, X*Y^3*Z, X*Y^2*Z^2, X*Y*Z^3, X*Z^4, Y^5, Y^4*Z, Y^3*Z^2, Y^2*Z^3, Y*Z^4, Z^5]
	indi = 0
	while L!=[]:
		templis = []
		P = L[0]
		Representatives.append(P)
		templis.append(P)
		def f(x, y, z):
			return P[0]*x^5 + P[1]*x^4*y + P[2]*x^4*z + P[3]*x^3*y^2 + P[4]*x^3*y*z + P[5]*x^3*z^2 + P[6]*x^2*y^3 + P[7]*x^2*y^2*z + P[8]*x^2*y*z^2 + P[9]*x^2*z^3 + P[10]*x*y^4 + P[11]*x*y^3*z + P[12]*x*y^2*z^2 + P[13]*x*y*z^3 + P[14]*x*z^4 + P[15]*y^5 + P[16]*y^4*z + P[17]*y^3*z^2 + P[18]*y^2*z^3 + P[19]*y*z^4 + P[20]*z^5
		for m in PGL3:
			def g(x, y, z):
				return f(m[0, 0]*x + m[0, 1]*y + m[0, 2]*z, m[1, 0]*x + m[1, 1]*y + m[1, 2]*z, m[2, 0]*x + m[2, 1]*y + m[2, 2]*z)
			h = g(X, Y, Z)
			Q = (h.coefficient(X^5), h.coefficient(X^4*Y), h.coefficient(X^4*Z), h.coefficient(X^3*Y^2), h.coefficient(X^3*Y*Z), h.coefficient(X^3*Z^2), h.coefficient(X^2*Y^3), h.coefficient(X^2*Y^2*Z), h.coefficient(X^2*Y*Z^2), h.coefficient(X^2*Z^3), h.coefficient(X*Y^4), h.coefficient(X*Y^3*Z), h.coefficient(X*Y^2*Z^2), h.coefficient(X*Y*Z^3), h.coefficient(X*Z^4), h.coefficient(Y^5), h.coefficient(Y^4*Z), h.coefficient(Y^3*Z^2), h.coefficient(Y^2*Z^3), h.coefficient(Y*Z^4), h.coefficient(Z^5))
			templis.append(Q)
		A = set(L)
		B = set(templis)
		C = A - B
		L = list(C)   

#The following function determines whether a curve has only one sinuglarity
#that is either a node or a (non-necessarily ordinary) cusp. 

var('x, y, z')
def only_one_node_or_cusp_check(f):
    ind = 0
    Polr.<x0,x1,x2> = PolynomialRing(GF(2), 3, order='lex')
    g = f(x0, x1, x2)
    gdx = g.derivative(x0)
    gdy = g.derivative(x1)
    gdz = g.derivative(x2)
    Id = Ideal(g, gdx, gdy, gdz)
    if Id.dimension()==1:
        F = GF(2).algebraic_closure()
        Pr3 = ProjectiveSpace(2)/F
        X = Pr3.subscheme(Id)
        rp = X.rational_points()
        if len(rp)==1:
            Polr.<x0,x1,x2> = PolynomialRing(F, 3, order='lex')
            g = f(x0, x1, x2)
            P = rp[0]
            if P[0]!=0:
                    h = g.reduce(Ideal(x0-1))
                    M = Ideal(x1 - P[1]/P[0], x2 - P[2]/P[0])
                    h1 = h.reduce(M^2)
                    h2 = h.reduce(M^3)
                    if (h1==0) and (h2!= 0):
                        return True                  
            elif P[1]!=0:
                    h = g.reduce(Ideal(x1-1))
                    M = Ideal(x0 - P[0]/P[1], x2 - P[2]/P[1])
                    h1 = h.reduce(M^2)
                    h2 = h.reduce(M^3)
                    if (h1==0) and (h2!= 0):
                        return True
            else:
                    h = g.reduce(Ideal(x2-1))
                    M = Ideal(x0 - P[0]/P[2], x1 - P[1]/P[2])
                    h1 = h.reduce(M^2)
                    h2 = h.reduce(M^3)
                    if (h1==0) and (h2!= 0):
                        return True
    return False		
	
#Now we find the curves containing only one singularity 
#that is a node or a cusp.

var('x, y, z')
Nodecusplist = []
length = len(Representatives)
for i in range(0, length):
    P = Representatives[i]
    def f(x, y, z):
        return P[0]*x^5 + P[1]*x^4*y + P[2]*x^4*z + P[3]*x^3*y^2 + P[4]*x^3*y*z + P[5]*x^3*z^2 + P[6]*x^2*y^3 + P[7]*x^2*y^2*z + P[8]*x^2*y*z^2 + P[9]*x^2*z^3 + P[10]*x*y^4 + P[11]*x*y^3*z + P[12]*x*y^2*z^2 + P[13]*x*y*z^3 + P[14]*x*z^4 + P[15]*y^5 + P[16]*y^4*z + P[17]*y^3*z^2 + P[18]*y^2*z^3 + P[19]*y*z^4 + P[20]*z^5
    if only_one_node_or_cusp_check(f):
        Nodecusplist.append(P)		


#Now we separate the nodal and the cuspidal cases. 
Nodal = []
Cuspidal = []
for P in Nodecusplist:
    var('x, y, z')
    def f(x, y, z):
        return P[0]*x^5 + P[1]*x^4*y + P[2]*x^4*z + P[3]*x^3*y^2 + P[4]*x^3*y*z + P[5]*x^3*z^2 + P[6]*x^2*y^3 + P[7]*x^2*y^2*z + P[8]*x^2*y*z^2 + P[9]*x^2*z^3 + P[10]*x*y^4 + P[11]*x*y^3*z + P[12]*x*y^2*z^2 + P[13]*x*y*z^3 + P[14]*x*z^4 + P[15]*y^5 + P[16]*y^4*z + P[17]*y^3*z^2 + P[18]*y^2*z^3 + P[19]*y*z^4 + P[20]*z^5
    ri.<X, Y> = GF(2)[]
    M = Ideal(X, Y)
    h = f(X, Y, 1)
    cusp = [X^2, Y^2, X^2 + Y^2]
    if h.reduce(M^3) in cusp:
        Cuspidal.append(P)
    else:
        Nodal.append(P)
		
#The list of the nodal curves is complete. Therefore, we need to 
#see what curves out of the cuspidal ones have an ordinary cusp. 
#We separate the cuspidal one depending on the coordinates of 
#singular points and map them so that the sinuglarity is at (0:0:1). 

cuX = []
cuY = []
cuXY = []
for P in Cuspidal:
    var('x, y, z')
    def f(x, y, z):
        return P[0]*x^5 + P[1]*x^4*y + P[2]*x^4*z + P[3]*x^3*y^2 + P[4]*x^3*y*z + P[5]*x^3*z^2 + P[6]*x^2*y^3 + P[7]*x^2*y^2*z + P[8]*x^2*y*z^2 + P[9]*x^2*z^3 + P[10]*x*y^4 + P[11]*x*y^3*z + P[12]*x*y^2*z^2 + P[13]*x*y*z^3 + P[14]*x*z^4 + P[15]*y^5 + P[16]*y^4*z + P[17]*y^3*z^2 + P[18]*y^2*z^3 + P[19]*y*z^4 + P[20]*z^5
    ri.<X, Y> = GF(2)[]
    M = Ideal(X, Y)
    h = f(X, Y, 1)
    if h.reduce(M^3) == X^2:
        cuX.append(P)
    if h.reduce(M^3) == Y^2:
        cuY.append(P)
    if h.reduce(M^3) == X^2 + Y^2:
        cuXY.append(P)
		
var('x, y, z')
test = []
for P in cuX:  
	def f(x, y, z):
		return P[0]*x^5 + P[1]*x^4*y + P[2]*x^4*z + P[3]*x^3*y^2 + P[4]*x^3*y*z + P[5]*x^3*z^2 + P[6]*x^2*y^3 + P[7]*x^2*y^2*z + P[8]*x^2*y*z^2 + P[9]*x^2*z^3 + P[10]*x*y^4 + P[11]*x*y^3*z + P[12]*x*y^2*z^2 + P[13]*x*y*z^3 + P[14]*x*z^4 + P[15]*y^5 + P[16]*y^4*z + P[17]*y^3*z^2 + P[18]*y^2*z^3 + P[19]*y*z^4 + P[20]*z^5
	ri.<X, Y, Z> = GF(2)[]
	m = matrix(GF(2), [[0, 1, 0], [1, 0, 0], [0, 0, 1]])
	def g(x, y, z):
		return f(m[0, 0]*x + m[0, 1]*y + m[0, 2]*z, m[1, 0]*x + m[1, 1]*y + m[1, 2]*z, m[2, 0]*x + m[2, 1]*y + m[2, 2]*z)
	h = g(X, Y, Z)
	Q = (h.coefficient(X^5), h.coefficient(X^4*Y), h.coefficient(X^4*Z), h.coefficient(X^3*Y^2), h.coefficient(X^3*Y*Z), h.coefficient(X^3*Z^2), h.coefficient(X^2*Y^3), h.coefficient(X^2*Y^2*Z), h.coefficient(X^2*Y*Z^2), h.coefficient(X^2*Z^3), h.coefficient(X*Y^4), h.coefficient(X*Y^3*Z), h.coefficient(X*Y^2*Z^2), h.coefficient(X*Y*Z^3), h.coefficient(X*Z^4), h.coefficient(Y^5), h.coefficient(Y^4*Z), h.coefficient(Y^3*Z^2), h.coefficient(Y^2*Z^3), h.coefficient(Y*Z^4), h.coefficient(Z^5))
	test.append(Q)
cuXcuY = test.copy()

var('x, y, z')
test = []
for P in cuXY:  
    def f(x, y, z):
        return P[0]*x^5 + P[1]*x^4*y + P[2]*x^4*z + P[3]*x^3*y^2 + P[4]*x^3*y*z + P[5]*x^3*z^2 + P[6]*x^2*y^3 + P[7]*x^2*y^2*z + P[8]*x^2*y*z^2 + P[9]*x^2*z^3 + P[10]*x*y^4 + P[11]*x*y^3*z + P[12]*x*y^2*z^2 + P[13]*x*y*z^3 + P[14]*x*z^4 + P[15]*y^5 + P[16]*y^4*z + P[17]*y^3*z^2 + P[18]*y^2*z^3 + P[19]*y*z^4 + P[20]*z^5
    ri.<X, Y, Z> = GF(2)[]
    m = matrix(GF(2), [[1, 0, 0], [1, 1, 0], [0, 0, 1]])
    def g(x, y, z):
        return f(m[0, 0]*x + m[0, 1]*y + m[0, 2]*z, m[1, 0]*x + m[1, 1]*y + m[1, 2]*z, m[2, 0]*x + m[2, 1]*y + m[2, 2]*z)
    h = g(X, Y, Z)
    Q = (h.coefficient(X^5), h.coefficient(X^4*Y), h.coefficient(X^4*Z), h.coefficient(X^3*Y^2), h.coefficient(X^3*Y*Z), h.coefficient(X^3*Z^2), h.coefficient(X^2*Y^3), h.coefficient(X^2*Y^2*Z), h.coefficient(X^2*Y*Z^2), h.coefficient(X^2*Z^3), h.coefficient(X*Y^4), h.coefficient(X*Y^3*Z), h.coefficient(X*Y^2*Z^2), h.coefficient(X*Y*Z^3), h.coefficient(X*Z^4), h.coefficient(Y^5), h.coefficient(Y^4*Z), h.coefficient(Y^3*Z^2), h.coefficient(Y^2*Z^3), h.coefficient(Y*Z^4), h.coefficient(Z^5))
    test.append(Q)
cuXYcuY = test.copy()

#Finally, we check whether a cusp is ordinary. 

list1 = []
ri.<X, Y, Z> = GF(2)[]
length = len(cuXYcuY)
for i in range(0, length):
    P = cuXYcuY[i]
    def f(x, y, z):
        return P[0]*x^5 + P[1]*x^4*y + P[2]*x^4*z + P[3]*x^3*y^2 + P[4]*x^3*y*z + P[5]*x^3*z^2 + P[6]*x^2*y^3 + P[7]*x^2*y^2*z + P[8]*x^2*y*z^2 + P[9]*x^2*z^3 + P[10]*x*y^4 + P[11]*x*y^3*z + P[12]*x*y^2*z^2 + P[13]*x*y*z^3 + P[14]*x*z^4 + P[15]*y^5 + P[16]*y^4*z + P[17]*y^3*z^2 + P[18]*y^2*z^3 + P[19]*y*z^4 + P[20]*z^5
    g = f(X, Y, Z)
    C = Curve(g)
    if C.genus() == 5:
        list1.append(P)
list2 = []
ri.<X, Y, Z> = GF(2)[]
length = len(cuXcuY)
for i in range(0, length):
    P = cuXcuY[i]
    def f(x, y, z):
        return P[0]*x^5 + P[1]*x^4*y + P[2]*x^4*z + P[3]*x^3*y^2 + P[4]*x^3*y*z + P[5]*x^3*z^2 + P[6]*x^2*y^3 + P[7]*x^2*y^2*z + P[8]*x^2*y*z^2 + P[9]*x^2*z^3 + P[10]*x*y^4 + P[11]*x*y^3*z + P[12]*x*y^2*z^2 + P[13]*x*y*z^3 + P[14]*x*z^4 + P[15]*y^5 + P[16]*y^4*z + P[17]*y^3*z^2 + P[18]*y^2*z^3 + P[19]*y*z^4 + P[20]*z^5
    g = f(X, Y, Z)
    C = Curve(g)
    if C.genus() == 5:
        list2.append(P)
list3 = []
ri.<X, Y, Z> = GF(2)[]
length = len(cuY)
for i in range(0, length):
    P = cuY[i]
    def f(x, y, z):
        return P[0]*x^5 + P[1]*x^4*y + P[2]*x^4*z + P[3]*x^3*y^2 + P[4]*x^3*y*z + P[5]*x^3*z^2 + P[6]*x^2*y^3 + P[7]*x^2*y^2*z + P[8]*x^2*y*z^2 + P[9]*x^2*z^3 + P[10]*x*y^4 + P[11]*x*y^3*z + P[12]*x*y^2*z^2 + P[13]*x*y*z^3 + P[14]*x*z^4 + P[15]*y^5 + P[16]*y^4*z + P[17]*y^3*z^2 + P[18]*y^2*z^3 + P[19]*y*z^4 + P[20]*z^5
    g = f(X, Y, Z)
    C = Curve(g)
    if C.genus() == 5:
        list3.append(P)

#We finish the job and do the moduli count to check our results. 

finalpart = 1
if finalpart == 1:
	A = set(list1)
	B = set(list2)
	C = set(list3)
	D = A.union(B)
	E = D.union(C)
	F = set(Nodal)
	G = E.union(F)
	TrigonalList = list(G)
	length = len(TrigonalList) #This is 2854
	
	L = TrigonalList.copy()
	var('x, y, z')
	teri.<X, Y, Z> = GF(2)[]
	li = [X^5, X^4*Y, X^4*Z, X^3*Y^2, X^3*Y*Z, X^3*Z^2, X^2*Y^3, X^2*Y^2*Z, X^2*Y*Z^2, X^2*Z^3, X*Y^4, X*Y^3*Z, X*Y^2*Z^2, X*Y*Z^3, X*Z^4, Y^5, Y^4*Z, Y^3*Z^2, Y^2*Z^3, Y*Z^4, Z^5]
	moduli_count = 0
	TrigonalWithAutomorphisms = []
	for i in range(0, length):
		P = L[i]
		auto = 0
		def f(x, y, z):
			return P[0]*x^5 + P[1]*x^4*y + P[2]*x^4*z + P[3]*x^3*y^2 + P[4]*x^3*y*z + P[5]*x^3*z^2 + P[6]*x^2*y^3 + P[7]*x^2*y^2*z + P[8]*x^2*y*z^2 + P[9]*x^2*z^3 + P[10]*x*y^4 + P[11]*x*y^3*z + P[12]*x*y^2*z^2 + P[13]*x*y*z^3 + P[14]*x*z^4 + P[15]*y^5 + P[16]*y^4*z + P[17]*y^3*z^2 + P[18]*y^2*z^3 + P[19]*y*z^4 + P[20]*z^5
		for m in PGL3:
			def g(x, y, z):
				return f(m[0, 0]*x + m[0, 1]*y + m[0, 2]*z, m[1, 0]*x + m[1, 1]*y + m[1, 2]*z, m[2, 0]*x + m[2, 1]*y + m[2, 2]*z)
			h = g(X, Y, Z)
			Q = (h.coefficient(X^5), h.coefficient(X^4*Y), h.coefficient(X^4*Z), h.coefficient(X^3*Y^2), h.coefficient(X^3*Y*Z), h.coefficient(X^3*Z^2), h.coefficient(X^2*Y^3), h.coefficient(X^2*Y^2*Z), h.coefficient(X^2*Y*Z^2), h.coefficient(X^2*Z^3), h.coefficient(X*Y^4), h.coefficient(X*Y^3*Z), h.coefficient(X*Y^2*Z^2), h.coefficient(X*Y*Z^3), h.coefficient(X*Z^4), h.coefficient(Y^5), h.coefficient(Y^4*Z), h.coefficient(Y^3*Z^2), h.coefficient(Y^2*Z^3), h.coefficient(Y*Z^4), h.coefficient(Z^5))
			if P == Q:
				auto = auto + 1
		TrigonalWithAutomorphisms.append([P, auto])
		moduli_count = moduli_count + 1/auto
	
#moduli_count is 2817 as expected by Wennink’s formula

#Similarly as for the hyperelliptic curves, we do the count over finite 
#extensions of F_2. Using that, we computed the Newton polygons and found
#the supersingular trigonal curves of genus 5 over F_2
